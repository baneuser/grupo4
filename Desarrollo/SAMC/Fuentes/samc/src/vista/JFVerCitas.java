/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;
import controlador.LoginController;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import vista.interfaces.IVerCitas;
import model.CitaModel;

/**
 *
 * @author Usuario
 */
public class JFVerCitas extends javax.swing.JFrame implements IVerCitas{

    /**
     * Creates new form JFVerCitas
     */
    DefaultTableModel miModelo;
    CitaModel datos;
    String[] cabecera={"IDCita","ID","Titulo","Fecha","Creado por"};
    String[][] data={};
    
    public JFVerCitas() {
        initComponents();
        tblCitas.setName(JTB_TABLA);
        jbtBuscar.setName(JBT_BUSCAR);
        jbtCerrar.setName(JBT_CERRAR);
        jbtLimpiar.setName(JBT_LIMPIAR);
        jbtBuscarPF.setName(JBT_BUSCARPF);
        jbtAtCita.setName(JBT_ATCITA);
        miModelo=new DefaultTableModel(data,cabecera);    
        tblCitas.setModel(miModelo);
        tblCitas.getColumnModel().getColumn(1).setPreferredWidth(5);
        tblCitas.getColumnModel().getColumn(0).setMinWidth(0);
        tblCitas.getColumnModel().getColumn(0).setMaxWidth(0);
        jbtAtCita.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCitas = new javax.swing.JTable();
        jdcFecha = new com.toedter.calendar.JDateChooser();
        jtfCita = new javax.swing.JTextField();
        jbtAtCita = new javax.swing.JButton();
        jbtBuscarPF = new javax.swing.JButton();
        jbtLimpiar = new javax.swing.JButton();
        jbtBuscar = new javax.swing.JButton();
        jbtCerrar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblCitas = new javax.swing.JTable()
        {
            public boolean isCellEditable(int row, int column)
            {
                return false;
            }
        };
        tblCitas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        tblCitas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCitasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCitas);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 170, 510, 190));
        getContentPane().add(jdcFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 130, -1, -1));
        getContentPane().add(jtfCita, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 100, 270, -1));

        jbtAtCita.setText("Atender cita");
        getContentPane().add(jbtAtCita, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 370, 130, -1));

        jbtBuscarPF.setText("Buscar por fecha");
        getContentPane().add(jbtBuscarPF, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 130, -1, -1));

        jbtLimpiar.setText("Ver todas las citas");
        getContentPane().add(jbtLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 370, 140, -1));

        jbtBuscar.setText("Buscar");
        jbtBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtBuscarActionPerformed(evt);
            }
        });
        getContentPane().add(jbtBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 100, -1, -1));

        jbtCerrar.setText("Cerrar");
        getContentPane().add(jbtCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 370, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Buscar cita:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Citas Programadas");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 50, 360, 40));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fondo.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 580, 380));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/image (1).png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 670, 430));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblCitasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCitasMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tblCitasMouseClicked

    private void jbtBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtBuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbtBuscarActionPerformed

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtAtCita;
    private javax.swing.JButton jbtBuscar;
    private javax.swing.JButton jbtBuscarPF;
    private javax.swing.JButton jbtCerrar;
    private javax.swing.JButton jbtLimpiar;
    private com.toedter.calendar.JDateChooser jdcFecha;
    private javax.swing.JTextField jtfCita;
    private javax.swing.JTable tblCitas;
    // End of variables declaration//GEN-END:variables
    
    @Override
    public void setControlador(LoginController c) {
        jbtBuscar.addActionListener(c);
        jbtCerrar.addActionListener(c);
        jbtLimpiar.addActionListener(c);
        jbtBuscarPF.addActionListener(c);
        jbtAtCita.addActionListener(c);
        tblCitas.addMouseListener(c);
    }

    @Override
    public void arranca() {
        this.setVisible(true);
        centrarVentana();
        
    }
    
    private void centrarVentana() {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        int anchoVentana = getWidth();
        int altoVentana = getHeight();
    
        int x = (dim.width - anchoVentana) / 2;
        int y = (dim.height - altoVentana) / 2;
    
        setLocation(x, y);
    }

    @Override
    public void ocultar() {
        this.setVisible(false);
    }

    @Override
    public void mostrarPanel(String txt) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void limpiarTexto() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void enfocar() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void seleccionarText() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setTitulo(String txt) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Object getObjeto(String id) {
        Object o = null;
        switch (id) {
            case JBT_CERRAR:
                o = jbtCerrar;
                break;
            case JBT_BUSCAR:
                o = jbtBuscar;
                break;
            case JBT_LIMPIAR:
                o = jbtLimpiar;
                break;
            case JBT_BUSCARPF:
                o = jbtBuscarPF;
                break;
            case JTB_TABLA:
                o = tblCitas;
                break;
            case JBT_ATCITA:
                o = jbtAtCita;
                break;
            default:
                throw new AssertionError();
        }
        return o;
    }

    @Override
    public void setTexto(String obj, String txt) {
        
    }

    @Override
    public String getTexto(String obj) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void limpiarTexto(String obj) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void llenarTabla(List<CitaModel> data) {
        while(miModelo.getRowCount()>0)miModelo.removeRow(0);
        String titulo, user;
        int id, count=1, idcita;
        Timestamp fecha;
        for(CitaModel citaModel : data){
            idcita=citaModel.getIdcita();
            id=count;
            titulo=citaModel.getTitulo();
            fecha=citaModel.getFecha();
            user=citaModel.getNombre_usuario();
            Object[] fila={idcita,id,titulo,fecha,user};
            miModelo.addRow(fila);
            count++;
        }
    }

    @Override
    public void buscarTabla(List<CitaModel> data) {
        if(!jtfCita.getText().isEmpty()){
            //Limpiar tabla
            while(miModelo.getRowCount()>0)miModelo.removeRow(0);
            String titulo, user;
            int cont=0, id, count=1, idcita;
            Timestamp fecha;    
            for (CitaModel citaModel : data){
                if (citaModel.getTitulo().equals(jtfCita.getText())){
                    idcita=citaModel.getIdcita();
                    id=count;
                    titulo=citaModel.getTitulo();
                    fecha=citaModel.getFecha();
                    user=citaModel.getNombre_usuario();
                    Object[] fila={idcita,id,titulo,fecha,user};
                    miModelo.addRow(fila);
                    cont++;
                    count++;
                }
            }
            if (cont==0)
            JOptionPane.showMessageDialog(null,"Cita NO encontrada","Confirmacion",JOptionPane.ERROR_MESSAGE);
        } else JOptionPane.showMessageDialog(null,"Error de Entrada de Datos","Confirmacion",JOptionPane.ERROR_MESSAGE);
    jbtAtCita.setEnabled(false);
    }

    @Override
    public void limpiarBusqueda(List<CitaModel> data) {
        while(miModelo.getRowCount()>0)miModelo.removeRow(0);
        llenarTabla(data);
        jtfCita.setText("");
    }

    @Override
    public void buscarFechaTabla(List<CitaModel> data) {
        while(miModelo.getRowCount()>0)miModelo.removeRow(0);
        String titulo, user;
        int cont=0, id, count=1, idpaciente;
        Timestamp fecha;
        Date fecha2 = jdcFecha.getDate();
        Calendar calendario2 = Calendar.getInstance();
        calendario2.setTime(fecha2);
        int anio2 = calendario2.get(Calendar.YEAR);
        int mes2 = calendario2.get(Calendar.MONTH);
        int dia2 = calendario2.get(Calendar.DAY_OF_MONTH);
            for (CitaModel citaModel : data){
                Date fecha1 = new Date((citaModel.getFecha()).getTime());
                Calendar calendario1 = Calendar.getInstance();
                calendario1.setTime(fecha1);
                int anio = calendario1.get(Calendar.YEAR);
                int mes = calendario1.get(Calendar.MONTH);
                int dia = calendario1.get(Calendar.DAY_OF_MONTH);
                
                if (anio==anio2 && mes==mes2 && dia==dia2){
                    titulo=citaModel.getTitulo();
                    fecha=citaModel.getFecha();
                    user=citaModel.getNombre_usuario();
                    idpaciente=citaModel.getIdcita();
                    id=count;
                    Object[] fila={idpaciente,id,titulo,fecha,user};
                    miModelo.addRow(fila);
                    cont++;
                    count++;
                }
            }
        if (cont==0)
        JOptionPane.showMessageDialog(null,"Cita NO encontrada","Confirmacion",JOptionPane.ERROR_MESSAGE);
        jbtAtCita.setEnabled(false);
    }

    @Override
    public void mostrarInfoCita(List<CitaModel> data) {
        int index = tblCitas.getSelectedRow();
        int value = Integer.parseInt(miModelo.getValueAt(index, 0).toString());
        int idcita=0, idmedico=0, idusuario=0, num_historial=0;
        String titulo="", nota="", nombre_estado="", nombre_medico="", nombre_usuario="", nombre_paciente="";
        Timestamp fecha=null, fecha_creacion=null;
        for (CitaModel citaModel : data){
            if(citaModel.getIdcita()==value){
                idcita = citaModel.getIdcita();
                titulo = citaModel.getTitulo();
                nota = citaModel.getNota();
                fecha = citaModel.getFecha();
                idmedico = citaModel.getIdmedico();
                fecha_creacion = citaModel.getFecha_creacion();
                idusuario = citaModel.getIdusuario();
                nombre_estado = citaModel.getNombre_estado();
                nombre_medico = citaModel.getNombre_medico();
                nombre_usuario = citaModel.getNombre_usuario();
                nombre_paciente = citaModel.getNombre_paciente();
                num_historial = citaModel.getNumero_historial();
            }
        }
        JOptionPane.showMessageDialog(null, //"Id de la cita: "+idcita+
                                            "Titulo de la cita: "+titulo+
                                            "\nMotivo de la cita: "+nota+
                                            "\nFecha de la cita: "+fecha+
                                            "\nMedico: "+nombre_medico+
                                            "\nCreado por: "+nombre_usuario+
                                            "\nFecha de creación: "+fecha_creacion+
                                            "\nPaciente: "+nombre_paciente+
                                            "\nEstado de la cita: "+nombre_estado);
                                            //"\nNumero del historial del paciente: "+num_historial);
    }

    @Override
    public void verAtenderCita() {
        jbtAtCita.setEnabled(true);
    }

    @Override
    public int buscarNumeroHistorial(List<CitaModel> data) {
        int index = tblCitas.getSelectedRow();
        int value = Integer.parseInt(miModelo.getValueAt(index, 0).toString());
        int num_historial=0;
        for (CitaModel citaModel : data){
            if(citaModel.getIdcita()==value){
                num_historial = citaModel.getNumero_historial();
            }
        }
        System.out.println(num_historial);
        return num_historial;
    }

    @Override
    public void ocultarAtenderCita() {
        jbtAtCita.setEnabled(false);
    }
}
